const express = require('express'); //(Alex Rusin, 2025)
const { v4: uuidv4 } = require('uuid'); // this is used to generate unique user IDs which are type uuid and the same goes for the app (owl, 2014)
const admin = require('firebase-admin'); //(Digital Fluency, 2020)

let db;

// Firebase initialization with error handling (Digital Fluency, 2020)
try {
    // Get Firebase configuration from environment variables
    const serviceAccountString = process.env.FIREBASE_SERVICE_ACCOUNT_KEY;
    const databaseURL = process.env.FIREBASE_DATABASE_URL; 

    // Validate that required environment variables are present
    if (!serviceAccountString || !databaseURL) {
        throw new Error("Missing FIREBASE_SERVICE_ACCOUNT_KEY or FIREBASE_DATABASE_URL .env variable.");
    }

    // Parse the service account JSON from environment variable (Digital Fluency, 2020)
    const serviceAccount = JSON.parse(serviceAccountString); 

    // Initialize Firebase Admin SDK with service account credentials (Digital Fluency, 2020)
    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount),
      databaseURL: databaseURL 
    });

    // Get reference to Firebase Realtime Database
    db = admin.database(); 
    console.log("Firebase Database initialized successfully.");
} catch (e) {
    // Log detailed error message for debugging on Render
    console.error("FATAL: Firebase Initialization Failed. Details:", e.message);
    throw e;
}

// Initialize Express application 
const app = express(); //(Alex Rusin, 2025)
const port = process.env.PORT || 3000; //(Alex Rusin, 2025)

// Host URL for generating invite links
const host = 'letslink-api.onrender.com'; 

// Middleware to parse JSON request bodies
app.use(express.json());

//- logs all incoming requests/features call on the app
app.use((req, res, next) => {
    console.log(`[Feature]: ${req.method} ${req.url}`);
    next(); 
});

/**
 * verifies API is running by return basic status information
 */
app.get('/', (req, res) => {
    res.status(200).json({ 
        status: "OK", 
        message: "API is running successfully" 
    });
});

/**
 * creates group and returns group data structures of group
 */
function createGroupResponse(groupId, groupData) {
    const userId = groupData?.userId || 'server-owner-id';
    const groupName = groupData?.groupName || 'Default Group Name';
    const description = groupData?.description || 'A new collaborative group.';
    const members = groupData?.members || [userId];

    return {
        groupId: groupId,
        userId: userId,
        groupName: groupName,
        description: description,
        inviteLink: `https://${host}/invite/${groupId}`, // Full invite URL
        members: members // Array of member user IDs
    };
}

/**
 * Endpoint to create a new group
 * Requires groupId to be provided in request body (generated by client)
 * If group already exists, returns existing group data
 */
app.post('/groups', async (req, res) => { 
    const groupId = req.body.groupId;
    const userId = req.body.userId || uuidv4(); // Generate user ID if not provided

    // Validate required groupId parameter
    if (!groupId) {
        console.error('Group creation failed: Missing groupId in request body.');
        return res.status(400).json({ error: 'The request body must contain a "groupId" field.' });
    }

    // Check if group already exists in Firebase (Digital Fluency, 2020)
    const groupRef = db.ref('groups/' + groupId);
    const snapshot = await groupRef.once('value'); 

    // If group exists, return existing data
    if (snapshot.exists()) {
        console.log(`Group already exists in Firebase: ${groupId}`);
        const data = snapshot.val(); 
        return res.status(200).json(createGroupResponse(groupId, data)); 
    }

    // Create new group data structure (Alex Rusin, 2025)
    const newGroupData = {
        userId: userId, // Group creator
        groupName: req.body.groupName || `Group ${groupId.substring(0, 4)}`, // Default name
        description: req.body.description || `Joined group : ${userId}.`, // Default description
        members: [userId] // Initialize members array with creator
    };

    // Write new group to Firebase database (Digital Fluency, 2020)
    await groupRef.set(newGroupData);
    console.log(`New group created: ${groupId} by user: ${userId}`);

    // Return success response with group data (Alex Rusin, 2025)
    return res.status(201).json(createGroupResponse(groupId, newGroupData)); 
});

/**
 * Endpoint for users to join existing groups
 * Uses groupId from invite link and userId to add user to group members
 *(Alex Rusin, 2025)
 */
app.post('/api/group/join', async (req, res) => {
    const { groupId, userId } = req.body;

    // Validate required parameters
    if (!groupId || !userId) {
        return res.status(400).json({ error: 'Missing groupId or userId in request body.' });
    }

    // Fetch group from Firebase
    const groupRef = db.ref('groups/' + groupId);
    const snapshot = await groupRef.once('value');

    // Check if group exists (Digital Fluency, 2020)
    if (!snapshot.exists()) {
        console.log(`Join failed: Group ID ${groupId} not found.`);
        return res.status(404).json({ error: `Group ID ${groupId} not found.` });
    }

    let groupData = snapshot.val();  //(Digital Fluency, 2020) 
     
    // Ensure members array exists and is properly formatted
    if (!Array.isArray(groupData.members)) {
        groupData.members = [];
    }

    // Add user to members list if not already a member 
    if (!groupData.members.includes(userId)) {
        groupData.members.push(userId);
        
        // Update members array in Firebase (Digital Fluency, 2020)
        await groupRef.update({ members: groupData.members }); 
        console.log(`User ${userId} successfully joined group ${groupId}. Total members: ${groupData.members.length}`);
    } else {
        console.log(`User ${userId} is already a member of group ${groupId}.`);
    }

    // Return complete group information for mobile app
    return res.status(200).json(createGroupResponse(groupId, groupData));
});

/**
 * Endpoint to validate group invite links
 * Used when users click on invite links to verify they're valid
 */
app.get('/invite/:groupId', async (req, res) => {
    const groupId = req.params.groupId;
    
    // Check if group exists in Firebase
    const groupRef = db.ref('groups/' + groupId);
    const snapshot = await groupRef.once('value');

    if (snapshot.exists()) { //(Digital Fluency, 2020)
        console.log(`Group ID ${groupId} successfully processed via invite link.`);
        res.status(200).send(`Group link for ID ${groupId} is valid and ready for processing.`);
    } else {
        console.log(`Failed attempt to process invalid group ID: ${groupId}.`);
        res.status(404).send('Invalid group invitation link.');
    }
});

/**
 * Endpoint to assign group invites to specific users
 * Stores invite information in the recipient's user profile for later access
 */
app.post('/invite/specificUser', async (req, res) => {
    // Extract data from request body
    const { groupId, userId, groupName, description } = req.body;

    // Validate required parameters
    if (!groupId || !userId) {
        console.error('Invite assignment failed: Missing groupId or userId.');
        return res.status(400).json({ 
            error: 'The request body must contain groupId and userId.' 
        });
    }

    // Verify that the target group exists (Digital Fluency, 2020)
    const groupRef = db.ref('groups/' + groupId);
    const groupSnapshot = await groupRef.once('value');

    if (!groupSnapshot.exists()) {
        console.log(`Invite assignment failed: Group ID ${groupId} not found.`);
        return res.status(404).json({ error: `Group ID ${groupId} not found.` });
    }
    
    // Use groupId as the invite token/link identifier
    const inviteLink = groupId; 

    //  invite data is stored in user's profile (Alex Rusin, 2025)
    const inviteData = {
        groupId: groupId,
        groupName: groupName, 
        description: description, 
        inviteLink: inviteLink 
    };

    // Store invite in user's receivedInvites in Firebase (Alex Rusin, 2025)
    const userInvitesRef = db.ref(`users/${userId}/receivedInvites/${groupId}`);

    try {
        await userInvitesRef.set(inviteData);
        console.log(`Invite for ${groupId} successfully assigned to user ${userId}.`);
        
        // Return success response
        return res.status(200).json({ 
            status: 'Invite assigned successfully', 
            invitedUser: inviteData
        });
    } catch (error) {
        console.error("Firebase error during invite assignment:", error);
        return res.status(500).json({ 
            error: 'Failed to assign invite due to database error.' 
        });
    }
});

// Start the Express server (Alex Rusin, 2025)
app.listen(port, () => {
    console.log(`Group Invitation API is running and listening on port ${port}`);
    console.log(`App must connect to: http://${host}:${port}`);
});

//Refrence List
/****  
 * Alex Rusin. “Node.js REST API Mastery: Build Powerful APIs with Express.” YouTube, 2 June 2025, www.youtube.com/watch?v=yD7X1qJA5nA. 
 * [Accessed 7 October 2025]
 * Digital Fluency. “Building Custom APIs on Top of the Firebase Realtime DB.” YouTube, 26 May 2020, 
 * www.youtube.com/watch?v=mWAwxbeGU_E.
 * [Accessed 7 October 2025]
 * owl. “How to Generate Unique ID with Node.js.” Stack Overflow, 27 Apr. 2014, stackoverflow.com/questions/23327010/how-to-generate-unique-id-with-node-js.
 * [Accessed 7 October 2025]
  */
